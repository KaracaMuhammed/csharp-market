@page "/products/single-product/{productId:int}"

@using BT.BrightMarket.BlazorUI.Interfaces;
@using BT.BrightMarket.Shared.DTOs;
@using BT.BrightMarket.Shared.Models.Conversations;
@using BT.BrightMarket.Shared.Models.Products;
@using BT.BrightMarket.Shared.Models.Users;

@inject ICategoryService categoryService
@inject IProductService productService
@inject IImageService imageService
@inject IConversationService conversationService
@inject IUserService userService;
@inject NavigationManager NavigationManager

@* <h3>ProductView</h3> *@

@* <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">*@
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script> 

@if (currentProduct != null)
{
    

    <div class="outer-container">

        <h3>Aanbieding</h3>

        <div class="container">
            <button class="return-button" @onclick="GoBack"><i class="fas fa-arrow-left"></i></button>

            <!-- image section carousel -->
            <div class="left-section">
                <div id="image-slider" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner">

                        <!-- images listed -->
                        @foreach (var image in currentProduct.Images)
                        {
                            <div class="carousel-item @(image == currentProduct.Images[0] ? "active" : "")">
                                <img src="@($"data:image;base64,{image.Data}")" alt="Product Image">
                            </div>
                        }

                        <!-- previous image button -->
                        <button class="carousel-control-prev" type="button" data-bs-target="#image-slider" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>

                        <!-- next image button -->
                        <button class="carousel-control-next" type="button" data-bs-target="#image-slider" data-bs-slide="next" style="color: #F4C709;">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>

                    </div>
                </div>
            </div>

            <div class="right-section">

                <h2 style="font-size: 2.5em; font-weight: bold; margin-top: 15px; margin-bottom: 0px;">@currentProduct.Name</h2>
                @if (@currentProduct.Description != null)
                {
                    <p style="line-height: 1.5; margin-top: 0.5em; margin-bottom: 0px;"><span style="font-weight: bold;">Beschrijving: </span>@currentProduct.Description</p>
                }
                <p style="font-size: 1.4em; ">
                    <span class="badge" style="background-color: black; color: white;"><span class="euro-symbol">€</span>@currentProduct.Price</span>
                </p>
                @if (PersonalProduct())
                {
                    <!-- not allowed to start conversation for an own product -->
                    <button class="interest-button" style="opacity: 0.4; cursor: not-allowed;">Persoonlijke product</button>
                }
                else
                {
                    <!-- start a conversation -->
                    <button class="interest-button" @onclick="() => StartConversation(currentProduct.Id)">Chat opstarten</button> @* Geïntereseerd *@
                }
            </div>
        </div>
    </div>
    
}

@code {

    [Parameter] public int productId { get; set; }
    private Product currentProduct;
    private User personalUser;

    protected override async Task OnInitializedAsync()
    {
        if (productId != 0)
        {
            currentProduct = await productService.GetProductByIdAsync(productId); // fetch current product
            currentProduct.Images = await LoadProductImages(productId); // fetch corresponding images
        }

        personalUser = await userService.GetPersonalUserAsync(); // get personal user (authenticated)
    }

    private async Task<List<ImageDTO>> LoadProductImages(int productId)
    {
        try
        {
            return await imageService.GetAllImagesByProductId(productId);
        }
        catch (Exception ex)
        {
            return new List<ImageDTO>();
        }
    }

    private async Task StartConversation(int productId)
    {
        try
        {
            var conversation = await conversationService.CreateConversationAsync(new ConversationDTO() { ProductId = productId });
            NavigationManager.NavigateTo($"/conversations/chat/{conversation.Id}");
        } catch (Exception ex)
        {
            if (ex is System.Exception && ex.Message.Contains("Failed to create conversation."))
            {
                var conversation = await conversationService.GetConversationByProductId(productId);
                NavigationManager.NavigateTo($"/conversations/chat/{conversation.Id}");
            }
        }

    }

    private bool PersonalProduct()
    {
        return currentProduct.UserId == personalUser.Id;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/products");
    }
}